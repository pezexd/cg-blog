import { Text } from "@/components/ui/text";
import { code } from "../../utils/code";
import Latex from "react-latex-next";
import "katex/dist/katex.min.css";
import { CodeBlock } from "@/components/ui/code-block";

export default function ElipsePage() {
  const ecuacion = `\\(\\frac{x^2 + h}{a^2} + \\frac{y^2 + k}{b^2} = 1\\)`;
  return (
    <>
      <div className="bg-white px-6 py-32 lg:px-8">
        <div className="mx-auto max-w-3xl text-base/7 text-gray-700">
          <Text variant="h1">Algoritmo de generaci√≥n de elipse</Text>
          <Text variant="p" className="mt-6">
            En este art√≠culo, exploraremos c√≥mo se genera una elipse
            computacionalmente, qu√© propiedades y caracter√≠sticas tiene, y c√≥mo
            implementar su algoritmo de generaci√≥n en C++.
          </Text>
          <div className="mt-10 max-w-2xl">
            <figure>
              <img
                src="/Ellipse-def-dc.svg.png"
                className="aspect-video rounded-xl bg-gray-50 object-contain"
              />
            </figure>
            <div className="mt-16">
              <Text variant="h2">¬øQu√© es una Elipse?</Text>
              <Text variant={"p"}>
                Una elipse es una curva cerrada y plana definida por la
                siguiente ecuaci√≥n est√°ndar en el plano cartesiano:
              </Text>

              <Text variant={"blockquote"} className="text-center text-4xl">
                <Latex>{ecuacion}</Latex>
              </Text>

              <Text variant={"ul"}>
                <li>
                  ùë• y ùë¶: Son las coordenadas de un punto cualquiera en la
                  elipse.
                </li>
                <li>
                  ‚Ñé y ùëò: Son las coordenadas de un punto cualquiera en la
                  elipse.
                </li>
                <li>
                  ùëé: Es la longitud del semieje mayor, que es la distancia desde
                  el centro de la elipse hasta el punto m√°s lejano en el eje
                  horizontal.
                </li>
                <li>
                  ùëè : Es la longitud del semieje menor, que es la distancia
                  desde el centro de la elipse hasta el punto m√°s cercano en el
                  eje vertical.
                </li>
              </Text>

              <Text variant={"h5"}>
                Propiedades de la elipse:
                <Text variant={"ul"}>
                  <li>
                    La suma de las distancias desde cualquier punto sobre la
                    elipse hasta dos puntos fijos llamados focos es constante.
                  </li>

                  <li>Los dos ejes son perpendiculares entre s√≠.</li>

                  <li>La elipse tiene dos focos ubicados en el eje mayor.</li>
                </Text>
              </Text>

              <figure>
                <img
                  src="/Ellipse-def-e.svg.png"
                  alt="elipse 2"
                  className="w-[80%] mx-auto"
                />
              </figure>

              <Text variant={"h4"} className="mt-16 text-center">
                Caracter√≠sticas del Algoritmo de Generaci√≥n de Elipses
              </Text>
              <Text variant={"p"} className="mt-5">
                El algoritmo de generaci√≥n de elipses se utiliza para dibujar
                una elipse en una pantalla o en una representaci√≥n gr√°fica.
                Tradicionalmente, uno de los m√©todos m√°s utilizados es el
                algoritmo de Bresenham, que permite trazar una elipse de manera
                eficiente usando solo operaciones de suma y resta, lo cual es
                ideal para aplicaciones de gr√°ficos en tiempo real
              </Text>

              <Text variant={"h5"}>
                Las caracter√≠sticas clave del algoritmo son:
                <Text variant={"ul"}>
                  <li>
                    <strong>Eficiencia:</strong> Utiliza una serie de decisiones
                    para trazar puntos en la elipse.
                  </li>

                  <li>
                    <strong>Simetr√≠a:</strong> Aprovecha la simetr√≠a de la
                    elipse, lo que significa que si trazamos un punto en un
                    cuadrante, podemos reflejarlo en los otros tres cuadrantes.
                  </li>

                  <li>
                    <strong>Iteraci√≥n eficiente:</strong> Permite calcular los
                    puntos de la elipse de forma iterativa sin necesidad de
                    realizar operaciones costosas como ra√≠ces cuadradas.
                  </li>
                </Text>
              </Text>

              <Text variant={"h4"} className="mt-16 text-center">
                Algoritmo de Generaci√≥n de Elipse en C++
              </Text>

              <Text variant={"p"} className="mb-8">
                A continuaci√≥n, un ejemplo b√°sico del algoritmo de Bresenham
                para dibujar una elipse en C++.
              </Text>

              <CodeBlock language="cpp" filename="main.cpp" code={code} />

              <Text variant={"h5"}>Explicaci√≥n del c√≥digo:</Text>

              <Text variant={"ol"}>
                <Text variant={"p"}>
                  1.{" "}
                  <Text variant={"code"} className="text-lg">
                    putpixel(xc + x, yc - y, WHITE):
                  </Text>
                  Esta funci√≥n se utiliza para dibujar un punto en las
                  coordenadas{" "}
                  <Text variant={"code"} className="text-lg">
                    (xc+x,yc‚àíy)
                  </Text>{" "}
                  <Text variant={"code"} className="text-lg">
                    (xc+x,yc‚àíy)
                  </Text>
                  , donde
                  <Text variant={"code"} className="text-lg">
                    xc
                  </Text>
                  y
                  <Text variant={"code"} className="text-lg">
                    yc
                  </Text>
                  son las coordenadas del centro de la elipse,
                  <Text variant={"code"} className="text-lg">
                    x
                  </Text>
                  e
                  <Text variant={"code"} className="text-lg">
                    y
                  </Text>
                  son las coordenadas actuales de un punto sobre la elipse.
                </Text>

                <Text variant={"p"}>
                  2. <strong>Simetr√≠a:</strong> Debido a la simetr√≠a de la
                  elipse, los puntos generados en un cuadrante se reflejan a los
                  otros tres cuadrantes.
                </Text>

                <Text variant={"p"}>
                  3. <strong>C√°lculo de la regi√≥n superior e inferior: </strong>{" "}
                  El algoritmo usa dos fases: la primera, para la regi√≥n
                  superior, y la segunda, para la regi√≥n inferior de la elipse.
                </Text>

                <Text variant={"p"}>
                  4. <strong>Condiciones de decisi√≥n:</strong> En cada
                  iteraci√≥n, se toma una decisi√≥n basada en el error, y
                  dependiendo de esa decisi√≥n, se ajustan las coordenadas{" "}
                  <Text variant={"code"}>x</Text> y{" "}
                  <Text variant={"code"}>y</Text>.
                </Text>
              </Text>

              <article className="text-end mt-12">
                <video src="/test.mp4" controls={true}></video>
                <Text variant={"small"}>
                  Video demostrativo del algoritmo en ejecucion <br />
                </Text>
                <Text variant={"small"}>
                  Autor:{" "}
                  <Text
                    variant={"a"}
                    target="_blank"
                    href="https://github.com/danexcode"
                  >
                    @danexcode
                  </Text>
                </Text>
              </article>

              <Text variant={"h4"} className="text-center mt-12">
                Aplicaciones de la Generaci√≥n de Elipses
              </Text>

              <Text variant={"p"}>
                El algoritmo de generaci√≥n de elipses tiene diversas
                aplicaciones en el campo de la computaci√≥n gr√°fica y la
                ingenier√≠a, tales como:
              </Text>
              <Text variant={"ul"}>
                <li>
                  <strong>Dise√±o de interfaces gr√°ficas:</strong> Se utiliza
                  para dibujar formas geom√©tricas, especialmente en software de
                  dise√±o gr√°fico.
                </li>

                <li>
                  <strong>Simulaciones astron√≥micas:</strong> Las √≥rbitas de los
                  planetas son elipses, por lo que este algoritmo puede ser √∫til
                  en simulaciones astron√≥micas.
                </li>

                <li>
                  <strong>Ingenier√≠a de sistemas √≥pticos:</strong> Se usa para
                  modelar lentes el√≠pticas y otros componentes √≥pticos.
                </li>

                <li>
                  <strong>Gr√°ficos 2D en videojuegos:</strong> Los gr√°ficos de
                  videojuegos a menudo requieren el trazado de formas el√≠pticas
                  para representar ciertos objetos.
                </li>
              </Text>

              <figure className="flex items-center mt-16">
                <img
                  src="/8737618af3 (1).gif"
                  alt="orbit"
                  className="w-[40%] mx-auto"
                />
                <img src="/tl.webp" alt="guy" className="w-[40%] mx-auto" />
              </figure>

              <Text variant={"h5"} className="pt-12">
                Ventajas del Algoritmo de Generaci√≥n de Elipses:
                <Text variant={"ul"}>
                  <li>
                    <strong>Eficiencia computacional:</strong> El algoritmo de
                    Bresenham no requiere operaciones costosas, como divisiones
                    o ra√≠ces cuadradas, lo que lo hace r√°pido y adecuado para
                    gr√°ficos en tiempo real.
                  </li>

                  <li>
                    <strong>Simplicidad:</strong> El algoritmo es relativamente
                    f√°cil de implementar y entender.
                  </li>

                  <li>
                    <strong>Simetr√≠a:</strong> Aprovecha la simetr√≠a de la
                    elipse, lo que reduce la cantidad de c√°lculos necesarios.
                  </li>
                </Text>
              </Text>

              <Text variant={"h5"}>
                Limitaciones del Algoritmo:
                <Text variant={"ul"}>
                  <li>
                    <strong>Precisi√≥n:</strong> Si bien el algoritmo es
                    eficiente, la precisi√≥n de los puntos generados puede ser
                    limitada por la resoluci√≥n de la pantalla o el √°rea de
                    dibujo.
                  </li>

                  <li>
                    <strong>Uso en elipses muy inclinadas:</strong> Aunque es
                    adecuado para elipses centradas en el origen, las elipses
                    rotadas o inclinadas requieren transformaciones adicionales,
                    lo que complica el algoritmo.
                  </li>

                  <li>
                    <strong>Dependencia del hardware:</strong> El rendimiento
                    puede variar dependiendo de la capacidad del hardware
                    gr√°fico y la implementaci√≥n de la funci√≥n putpixel.
                  </li>
                </Text>
              </Text>

              <Text variant={"h4"} className="text-center mt-12">
                Conclusi√≥n
              </Text>

              <Text variant={"p"}>
                El algoritmo de generaci√≥n de elipses, especialmente el basado
                en Bresenham, es una herramienta poderosa en la computaci√≥n
                gr√°fica. Su eficiencia y simplicidad lo convierten en un
                componente esencial en muchas aplicaciones, desde simulaciones
                hasta gr√°ficos en tiempo real. Sin embargo, como todo algoritmo,
                tiene sus limitaciones, especialmente cuando se trata de
                precisi√≥n o el manejo de elipses no centradas en el origen.
              </Text>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
